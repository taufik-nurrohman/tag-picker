extends _index.pug

block state
  - const scripts = ['index.min.js']
  - const styles = ['../layout/index.min.css', 'index.min.css']
  - const theme = '#000'
  - const title = 'Tag Picker ' + version

block script
  script
    | const picker = new TagPicker(document.forms[0].tags);
    | picker.on('has.tag', tag => {
    |     alert('Tag “' + tag + '” already exists.');
    | });

block style
  style
    | /* Add Bootstrap-like focus ring effect */
    | .tag-picker.tag-picker--focus {
    |   --shadow-tag-picker--focus: 0 0 0 3px rgba(0, 0, 255, .25);
    |   --shadow-tag-picker: 0 0 0 3px rgba(0, 0, 255, .25);
    | }

block content
  p(role='alert') Do you like this project? Please support my #[a(href='https://github.com/mecha-cms') Mecha CMS] project too. Thank you!
  header
    h1= title
    p Tag Picker is a simple JavaScript application that aims to provide better experience for users in adding and removing comma-separated list of words.
    hr
  main
    p Tags are comma-separated list of words. This application has support for hooks, so you can listen to events that occur at each interaction to provide additional features. Each tag item can also be selected using the arrow keys and a mouse click to perform actions on the selected tag, for example, to delete the tag.
    form(method='get' target='_blank')
      p(tabindex='0') Previous tabbable element.
      p: input(id='tags' name='tags' placeholder='foo, bar, baz' type='text' value='foo, bar')
      p(role='group')
        button(type='submit') Submit
        = ' '
        button(type='reset') Reset
    h2#usage
      a(href='#usage') #
      = ' Usage'
    h3 Browser
    pre: code
      | &lt;!DOCTYPE html&gt;
      | &lt;html dir="ltr"&gt;
      |   &lt;head&gt;
      |     &lt;meta charset="utf-8"&gt;
      |     &lt;link href="#[a(href='index.min.css' target='_blank') ./index.min.css]" rel="stylesheet"&gt;
      |   &lt;/head&gt;
      |   &lt;body&gt;
      |     &lt;p&gt;
      |       &lt;input type="text"&gt;
      |     &lt;/p&gt;
      |     &lt;script src="#[a(href='index.min.js' target='_blank') ./index.min.js]"&gt;&lt;/script&gt;
      |     &lt;script&gt;
      |       const picker = new TagPicker(document.querySelector('input'));
      |     &lt;/script&gt;
      |   &lt;/body&gt;
      | &lt;/html&gt;
    h3 Node.js
    p Functions and methods in this application are mostly native JavaScript and are intended for use by the browser. Node.js doesn&rsquo;t know about the DOM, so this kind of practice will probably be used more often to build new browser packages than to be used directly in the Node.js server.
    h4 CommonJS
    pre: code
      | const TagPicker = require('@taufik-nurrohman/tag-picker').default;
      |
      | const picker = new TagPicker(document.querySelector('input'));
    h4 ECMAScript
    pre: code
      | import TagPicker from '@taufik-nurrohman/tag-picker';
      |
      | const picker = new TagPicker(document.querySelector('input'));
    h2#examples
      a(href='#examples') #
      = ' Examples'
    ul
      li: a(href='test.html' target='_blank') No Idea?
      li: a(href='test/value.html' target='_blank') Set Pre-Defined Value
      li: a(href='test/hint.html' target='_blank') Set Hint/Placeholder
      li: a(href='test/focus.html' target='_blank') Focus State
      li: a(href='tweak/invalid.html' target='_blank') Invalid State (Custom)
      li: a(href='tweak/focus.hint.html' target='_blank') Hide Hint/Placeholder on Focus
      li: a(href='test/disabled.html' target='_blank') Disabled Input
      li: a(href='test/read-only.html' target='_blank') Read-Only Input
      li: a(href='test/min.html' target='_blank') Limit Minimum Tags
      li: a(href='test/max.html' target='_blank') Limit Maximum Tags
      li: a(href='test/not.html' target='_blank') Check for Valid Tag Pattern
      li: a(href='test/form.html' target='_blank') Form Event
      li: a(href='test/paste.html' target='_blank') Paste Event
      li: a(href='tweak/alert.html' target='_blank') Warn for Duplicate Tags with Alert Message
      li: a(href='tweak/target.html' target='_blank') Warn for Duplicate Tags with Flash Highlight
      li: a(href='test/escape.html' target='_blank') Disable Characters with #[code picker.state.escape]
      li: a(href='test/f.html' target='_blank') Filter Characters with #[code picker.f()] Method
      li #[a(href='tweak/path.html' target='_blank') Directory] (Experiment)
    h2#constructor
      a(href='#constructor') #
      = ' Constructor'
    pre: code const picker = new TagPicker(self, join = ', ');
    pre: code
      | const picker = new TagPicker(self, state = {
      |     escape: [','],
      |     join: ', ',
      |     max: 9999,
      |     min: 0,
      |     pattern: null,
      |     with: []
      | });
    h2#parameters
      a(href='#parameters') #
      = ' Parameters'
    h3: code self
    p The input element.
    h3: code join
    p The character to join the tags (usually a comma followed by a space).
    h3: code state
    p The configuration data.
    h3: code state.escape
    p List of characters to trigger the tag insertion.
    h3: code state.join
    p The character to join the tags (usually a comma followed by a space).
    h3: code state.max
    p Maximum tags allowed to be inserted.
    h3: code state.min
    p Minimum tags that must be present to be able to be submitted by the form.
    h3: code state.pattern
    p If defined, tag insertion will be performed only if tag name is matched with the pattern.
    h3: code state.with
    p List of callable functions or objects containing an #[code attach()] method to be invoked each time the application is initialized. A very simple “plugin” system.
    h2#methods
      a(href='#methods') #
      = ' Methods'
    h3 Instance Methods
    p Instance methods are methods that are available through the results of a #[code TagPicker] construct.
    h3 Static Methods
    p Static methods are methods that are directly available on the #[code TagPicker] object.
    h2#properties
     a(href='#properties') #
     = ' Properties'
    h3 Instance Properties
    p Instance properties are properties that are available through the results of a #[code TextEditor] construct.
    h3 Static Properties
    p Static properties are properties that are directly available on the #[code TextEditor] object.
    h2#extensions
      a(href='#extensions') #
      = ' Extensions'
    h3 Anatomy of an Extension
    p Extension as a function:
    pre: code
      | function Extension(self, state = {}) {
      |     this.a = 1;
      |     this.b = function () {};
      |     return this;
      | }
      |
      | Object.defineProperty(Extension, 'name', {
      |     value: 'Extension'
      | });
    p Extension as an object:
    pre: code
      | const Extension = {
      |     attach: function (self, state = {}) {},
      |     detach: function (self, state = {}) {},
      |     name: 'Extension'
      | };
    h3 Usage of an Extension
    p As a core extension:
    pre: code
      | TagPicker.state.with.push(Extension);
    p As an optional extension:
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     with: [Extension]
      | });
    h3 List of Extensions
    p: em None.
    h2#license
      a(href='#license') #
      = ' License'
    p Use it for free, pay if you get paid. So, you&rsquo;ve just benefited financially after using this project? It&rsquo;s a good idea to #[a(href='https://paypal.me/tatautaufik' target='_blank') share a little financial support] with this open source project too. Your support will motivate me to do any further development, as well as to provide voluntary support to overcome problems related to this project.
    p Thank you! ❤️
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman