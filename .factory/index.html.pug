extends _index.pug

block state
  - const scripts = ['index.js']
  - const styles = ['../layout/index.min.css', '../layout/anchor/index.min.css', 'index.min.css']
  - const theme = '#000'
  - const title = 'Tag Picker ' + version

block script
  script
    | const picker = new TagPicker(document.forms[0].tags);
    | picker.on('change', function () {
    |     console.log(this.value);
    | });
    | picker.on('has.tag', tag => {
    |     alert('Tag “' + tag + '” already exists.');
    | });
    | picker.on('reset', function () {
    |     this.focus();
    | });

block style
  style
    | body {
    |   margin-left: auto;
    |   margin-right: auto;
    |   max-width: 60rem;
    | }
    | .tag-picker,
    | .tag-picker__tag,
    | .tag-picker__text {
    |   border-width: 2px;
    | }
    | .tag-picker {
    |   border-color: #000;
    |   color: #000;
    |   flex: 1;
    | }
    | .tag-picker:focus,
    | .tag-picker:focus-within {
    |   border-color: #00f;
    | }
    | .tag-picker__flex {
    |   gap: 2px;
    |   padding: 2px;
    | }
    | .tag-picker__tag {
    |   background: #f00;
    |   border-color: transparent;
    |   gap: 0.5em;
    |   padding-left: 0.5em;
    |   padding-right: 0.5em;
    | }
    | .tag-picker__tag:focus {
    |   border-color: #000;
    |   outline: 0;
    | }
    | .tag-picker__tag[aria-selected='true'],
    | .tag-picker__tag[aria-selected='true']:focus {
    |   background: #c00;
    | }
    | .tag-picker__text {
    |   padding-left: 0.5em;
    |   padding-right: 0.5em;
    | }
    | .tag-picker__x {
    |   color: #fff;
    | }

block content
  p(role='alert') Do you like this project? Please support my #[a(href='https://github.com/mecha-cms') Mecha CMS] project too. Thank you!
  header
    hgroup
      h1= title
      p Tag Picker is a JavaScript application designed to simplify the management of comma-separated lists of words, offering a minimalist interface for an enhanced user experience. Users can easily add tags by typing a word and pressing the #[kbd ,] key (by default), or remove tags with a quick click (or by using common keys such as the #[kbd Backspace] or #[kbd Delete] keys). Developers can easily integrate and customize this application styles to match the design of their web project.
    p It supports native keyboard interaction as if it were plain text. You should be able to copy, cut, and paste from/to the mask. Click a tag to select it, press the #[kbd Control] key while clicking the tag to select multiple tags. You can also select the tags using the combination of #[kbd Shift] and #[kbd ArrowLeft] or #[kbd ArrowRight] keys.
  main
    form(method='get' target='_blank')
      p(role='group')
        input(name='tags' placeholder='foo, bar, baz' type='text' value='foo, bar')
        = ' '
        button(type='submit') Submit
        = ' '
        button(type='reset') Reset
    h2#usage
      a(aria-hidden='true' href='#usage') #
      = ' Usage'
    div(role='note')
      p #[strong Note:] CSS variables have been removed since version 4.0.0. From now on, I will only provide a minimal style just to make viable interaction. Expect it to look ugly by default. The main goal of this application is to be able to integrate it seamlessly into your web design. By providing a minimal style, it is easy to add other styles to it to adapt it to your own web design. Have a look at the source code on this page to see how I adapted the style to resemble the default style of the previous version.
    h3#browser
      a(aria-hidden='true' href='#browser') #
      = ' Browser'
    pre: code
      | &lt;!DOCTYPE html&gt;
      | &lt;html dir="ltr"&gt;
      |   &lt;head&gt;
      |     &lt;meta charset="utf-8"&gt;
      |     &lt;link href="#[a(href='index.min.css' target='_blank') ./index.min.css]" rel="stylesheet"&gt;
      |     &lt;style&gt;
      |       .tag-picker {
      |         width: 100%;
      |       }
      |     &lt;/style&gt;
      |   &lt;/head&gt;
      |   &lt;body&gt;
      |     &lt;p&gt;
      |       &lt;input type="text"&gt;
      |     &lt;/p&gt;
      |     &lt;script src="#[a(href='index.min.js' target='_blank') ./index.min.js]"&gt;&lt;/script&gt;
      |     &lt;script&gt;
      |       const picker = new TagPicker(document.querySelector('input'));
      |     &lt;/script&gt;
      |   &lt;/body&gt;
      | &lt;/html&gt;
    h3#node
      a(aria-hidden='true' href='#node') #
      = ' Node.js'
    p Functions and methods in this application are mostly native JavaScript and are intended for use by the browser. Node.js doesn’t know about the DOM, so this kind of practice will probably be used more often to build new browser packages than to be used directly in the Node.js server.
    h4#cjs
      a(aria-hidden='true' href='#cjs') #
      = ' CommonJS'
    pre: code
      | const TagPicker = require('@taufik-nurrohman/tag-picker').default;
      |
      | const picker = new TagPicker(document.querySelector('input'));
    h4#mjs
      a(aria-hidden='true' href='#mjs') #
      = ' ECMAScript'
    pre: code
      | import TagPicker from '@taufik-nurrohman/tag-picker';
      |
      | const picker = new TagPicker(document.querySelector('input'));
    h2#tests
      a(aria-hidden='true' href='#tests') #
      = ' Tests'
    ul
      li: a(href='test.html' target='_blank') No Idea?
      li: a(href='test/attach,detach.html' target='_blank') Attach, Detach
      li: a(href='test/pattern.html' target='_blank') Convert Tag Name
      li: a(href='test/copy,cut,paste.html' target='_blank') Copy, Cut, and Paste Events
      li: a(href='test/join.html' target='_blank') Custom Tags Separator
      li: a(href='test/escape.html' target='_blank') Disabled Characters
      li: a(href='test/disabled.html' target='_blank') Disabled State
      li: a(href='test/focus.html' target='_blank') Focus Automatically
      li: a(href='test/form.html' target='_blank') Form Events
      li: a(href='test/max.html' target='_blank') Limit Maximum Tags
      li: a(href='test/min.html' target='_blank') Limit Minimum Tags
      li: a(href='test/read-only.html' target='_blank') Read-Only State
      li: a(href='test/required.html' target='_blank') Required State
      li: a(href='test/not.html' target='_blank') Validate Tag Name
    h2#tweaks
      a(aria-hidden='true' href='#tweaks') #
      = ' Tweaks'
    ul
      li: a(href='tweak/convert.html' target='_blank') Converted Tag Display
      li: a(href='tweak/focus.html' target='_blank') Hide Input Hint on Focus
      li: a(href='tweak/blur.html' target='_blank') Insert Tag Name on Blur
      li: a(href='tweak/invalid.html' target='_blank') Invalid State (Custom)
      li: a(href='tweak/array.html' target='_blank') Tags as Array
      li: a(href='tweak/alert.html' target='_blank') Warn for Duplicate Tags with Alert Message
      li: a(href='tweak/description.html' target='_blank') Warn for Duplicate Tags with Description Below the Input
      li: a(href='tweak/target.html' target='_blank') Warn for Duplicate Tags with Flash Highlight
    h2#constructors
      a(aria-hidden='true' href='#constructors') #
      = ' Constructors'
    h3#constructor-tag-picker
      a(aria-hidden='true' href='#constructor-tag-picker') #
      = ' '
      code TagPicker(self, state)
    pre: code const picker = new TagPicker(self, join = ', ');
    pre: code
      | const picker = new TagPicker(self, state = {
      |     escape: [','],
      |     join: ', ',
      |     max: Infinity,
      |     min: 0,
      |     pattern: null,
      |     with: []
      | });
    h3#constructor-tag-picker-tags
      a(aria-hidden='true' href='#constructor-tag-picker-tags') #
      = ' '
      code TagPicker.Tags(picker, tags)
    p This constructor is used internally. It is the return value of the #[a(href='#instance-property-tags') #[code picker.tags]] property. It contains methods like #[a(href='#instance-property-tags-method-get') #[code get()]], #[a(href='#instance-property-tags-method-has') #[code has()]], #[a(href='#instance-property-tags-method-let') #[code let()]], and #[a(href='#instance-property-tags-method-set') #[code set()]] to modify the current tags.
    pre: code
      | const tags = new TagPicker.Tags(picker, ['Tag 1', 'Tag 2', 'Tag 3']);
    h2#parameters
      a(aria-hidden='true' href='#parameters') #
      = ' Parameters'
    h3#parameter-self
      a(aria-hidden='true' href='#parameter-self') #
      = ' '
      code self
    p The #[code &lt;input&gt;] element.
    h3#parameter-join
      a(aria-hidden='true' href='#parameter-join') #
      = ' '
      code join
    p The character to join the tags (usually a comma followed by a space).
    h3#parameter-state
      a(aria-hidden='true' href='#parameter-state') #
      = ' '
      code state
    p The configuration data.
    h4#parameter-state-escape
      a(aria-hidden='true' href='#parameter-state-escape') #
      = ' '
      code state.escape
    p List of characters to trigger the tag insertion. It is #[code='[\',\']'] by default, which means that you cannot have a #[code ','] character in the tag name. You can also add #[code='\'\\n\''] and #[code='\'\\t\''] to the list so that it will insert a tag when you press the #[kbd Tab] or #[kbd Enter] key.
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     escape: [',', ' ', '\n', '\t']
      | });
    h4#parameter-state-join
      a(aria-hidden='true' href='#parameter-state-join') #
      = ' '
      code state.join
    p The character to join the tags (usually a comma followed by a space).
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), '+');
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     join: '+'
      | });
    h4#parameter-state-max
      a(aria-hidden='true' href='#parameter-state-max') #
      = ' '
      code state.max
    p The maximum number of tags that can be inserted.
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     max: 25
      | });
    h4#parameter-state-min
      a(aria-hidden='true' href='#parameter-state-min') #
      = ' '
      code state.min
    p The minimum number of tags that must be inserted to be able to submit the form. The default value of this state is set to #[code 0], but if the #[code required] attribute is present on the #[code &lt;input&gt;] element, then the default value of this state will be set to #[code 1].
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     min: 5
      | });
    h4#parameter-state-pattern
      a(aria-hidden='true' href='#parameter-state-pattern') #
      = ' '
      code state.pattern
    p If defined, the tag will be inserted only if the input matches the pattern. if value is defined as a function, this configuration will be used to convert the current input to the desired tag format. return value can be a string or an array containing the desired tag text and its attributes.
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     pattern: '^[a-z\\d]+(-[a-z\\d]+)*$'
      | });
      |
      | picker.on('is.tag', name => {
      |     console.info('The input “' + name + '” is a valid tag name.');
      | });
      |
      | picker.on('not.tag', name => {
      |     console.error('The input “' + name + '” is not a valid tag name.');
      | });
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     pattern: function (value) {
      |         return (value || "").toLowerCase().replace(/[^a-z\d-]/gi, '-').replace(/-+/g, '-').replace(/^-|-$/g, "");
      |     }
      | });
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     pattern: function (value) {
      |         return [value, {
      |             value: (value || "").toLowerCase().replace(/[^a-z\d-]/gi, '-').replace(/-+/g, '-').replace(/^-|-$/g, "")
      |         }];
      |     }
      | });
    h4#parameter-state-with
      a(aria-hidden='true' href='#parameter-state-with') #
      = ' '
      code state.with
    p List of #[a(href='#anatomy-of-an-extension') callable functions or objects containing an #[code attach()] method] to be invoked each time the application is initialized. A very simple “plugin” system.
    h2#methods
      a(aria-hidden='true' href='#methods') #
      = ' Methods'
    h3#instance-methods
      a(aria-hidden='true' href='#instance-methods') #
      = ' Instance Methods'
    p Instance methods are methods available through the results of a #[a(href='#constructor-tag-picker') #[code TagPicker]] construct.
    h4#instance-method-attach
      a(aria-hidden='true' href='#instance-method-attach') #
      = ' '
      code picker.attach(self, state)
    p Re-initializes the application and its #[a(href='#extensions') extensions] after it has been detached.
    pre: code
      | picker.attach();
    h4#instance-method-blur
      a(aria-hidden='true' href='#instance-method-blur') #
      = ' '
      code picker.blur()
    p Blurs from the tag picker’s input.
    pre: code
      | picker.blur();
    h4#instance-method-detach
      a(aria-hidden='true' href='#instance-method-detach') #
      = ' '
      code picker.detach()
    p Removes the application view and executes the #[code detach()] method of the #[a(href='#extensions') extensions], if they are present.
    pre: code
      | picker.detach();
    h4#instance-method-fire
      a(aria-hidden='true' href='#instance-method-fire') #
      = ' '
      code picker.fire(event, data, that)
    p Fires an event.
    pre: code
      | picker.fire('change', [picker.value]);
    h4#instance-method-focus
      a(aria-hidden='true' href='#instance-method-focus') #
      = ' '
      code picker.focus(mode = true)
    p Focuses to the tag picker’s input. If it has a text, it will select the text as well.
    pre: code
      | picker.focus(); // Focus and select the text
      | picker.focus(-1); // Focus and put the caret to the start of the text
      | picker.focus(+1); // Focus and put the caret to the end of the text
    h4#instance-method-off
      a(aria-hidden='true' href='#instance-method-off') #
      = ' '
      code picker.off(event, task)
    p Removes an event.
    pre: code
      | picker.off('change'); // Remove all events from the `change` event container
      | picker.off('change', onChange); // Remove `onChange` event from the `change` event container
    h4#instance-method-on
      a(aria-hidden='true' href='#instance-method-on') #
      = ' '
      code picker.on(event, task)
    p Adds a new event.
    pre: code
      | picker.on('change', function () {
      |     console.log(this.value.split(this.state.join));
      | });
    pre: code
      | function onChange() {
      |     console.log(this.value.split(this.state.join));
      | }
      |
      | picker.on('change', onChange);
    h3#static-methods
      a(aria-hidden='true' href='#static-methods') #
      = ' Static Methods'
    p Static methods are methods available directly on the #[a(href='#constructor-tag-picker') #[code TagPicker]] object.
    h4#static-method-from
      a(aria-hidden='true' href='#static-method-from') #
      = ' '
      code TagPicker.from(self, state)
    p Creates a new #[a(href='#constructor-tag-picker') #[code TagPicker]] instance.
    pre: code
      | const picker = TagPicker.from(document.querySelector('input'));
    h4#static-method-of
      a(aria-hidden='true' href='#static-method-of') #
      = ' '
      code TagPicker.of(self)
    p Gets #[a(href='#constructor-tag-picker') #[code TagPicker]] instance of an element.
    pre: code
      | document.querySelectorAll('input').forEach(self => {
      |     const picker = TagPicker.of(self);
      | });
    h2#properties
     a(aria-hidden='true' href='#properties') #
     = ' Properties'
    h3#instance-properties
      a(aria-hidden='true' href='#instance-properties') #
      = ' Instance Properties'
    p Instance properties are properties available through the results of a #[a(href='#constructor-tag-picker') #[code TagPicker]] construct.
    h4#instance-property-active
      a(aria-hidden='true' href='#instance-property-active') #
      = ' '
      code picker.active
    p Gets or sets the active state of the tag picker. By setting the value to #[code false] or #[code true], the disabled state of the source element will also be set automatically.
    pre: code
      | picker.active = false; // Make the tag picker “disabled”
      | picker.active = true; // Make the tag picker “enabled”
    h4#instance-property-fix
      a(aria-hidden='true' href='#instance-property-fix') #
      = ' '
      code picker.fix
    p Gets or sets the read-only state of the tag picker. By setting the value to #[code false] or #[code true], the read-only state of the source element will also be set automatically.
    pre: code
      | picker.fix = true; // Make the tag picker “read-only”
    h4#instance-property-hooks
      a(aria-hidden='true' href='#instance-property-hooks') #
      = ' '
      code picker.hooks
    p Returns the events data.
    pre: code
      | console.log(picker.hooks);
    h4#instance-property-mask
      a(aria-hidden='true' href='#instance-property-mask') #
      = ' '
      code picker.mask
    p Returns the tag picker’s mask.
    pre: code
      | picker.mask.classList.add(picker.state.n + '--dark');
    h4#instance-property-max
      a(aria-hidden='true' href='#instance-property-max') #
      = ' '
      code picker.max
    p Proxy that passes to the #[a(href='#parameter-state-max') #[code picker.state.max]] property, with additional actions that are executed while the value is being set.
    pre: code
      | console.log(picker.max); // Returns the `picker.state.max` value
    pre: code
      | picker.max = 4; // Allow a maximum of 4 tags to be inserted.
    h4#instance-property-min
      a(aria-hidden='true' href='#instance-property-min') #
      = ' '
      code picker.min
    p Proxy that passes to the #[a(href='#parameter-state-min') #[code picker.state.min]] property, with additional actions that are executed while the value is being set.
    pre: code
      | console.log(picker.min); // Returns the `picker.state.min` value
    pre: code
      | picker.min = 4; // Insert at least 4 tags to be able to submit the form.
    h4#instance-property-self
      a(aria-hidden='true' href='#instance-property-self') #
      = ' '
      code picker.self
    p Returns the #[code &lt;input&gt;] element.
    pre: code
      | console.log(picker.self.getAttribute('name'));
    h4#instance-property-state
      a(aria-hidden='true' href='#instance-property-state') #
      = ' '
      code picker.state
    p Returns the application states if any.
    pre: code
      | console.log(picker.state);
    h4#instance-property-tags
      a(aria-hidden='true' href='#instance-property-tags') #
      = ' '
      code picker.tags
    p Gets the current tags list data, or sets (overwrites) the current tags list with a new data.
    pre: code
      | console.log(picker.tags);
    pre: code
      | picker.tags = [
      |     'Tag 1',
      |     'Tag 2',
      |     'Tag 3'
      | ];
      |
      | // Or…
      | picker.tags.set('Tag 1');
      | picker.tags.set('Tag 2');
      | picker.tags.set('Tag 3');
    pre: code
      | picker.tags = [
      |     ['Tag 1', {
      |         value: 'tag-1'
      |     }],
      |     ['Tag 2', {
      |         value: 'tag-2'
      |     }],
      |     ['Tag 3', {
      |         title: 'This is a tag description.',
      |         value: 'tag-3'
      |     }]
      | ];
      |
      | // Or…
      | picker.tags.set('tag-1', 'Tag 1');
      | picker.tags.set('tag-2', 'Tag 2');
      | picker.tags.set('tag-3', ['Tag 3', {
      |     title: 'This is a tag description.'
      | }]);
    pre: code
      | picker.tags = {
      |     'tag-1': 'Tag 1',
      |     'tag-2': 'Tag 2',
      |     'tag-3': 'Tag 3'
      | };
      |
      | // Or…
      | picker.tags.set('tag-1', 'Tag 1');
      | picker.tags.set('tag-2', 'Tag 2');
      | picker.tags.set('tag-3', 'Tag 3');
    pre: code
      | const tags = new Map;
      |
      | tags.set('tag-1', 'Tag 1');
      | tags.set('tag-2', 'Tag 2');
      | tags.set('tag-3', 'Tag 3');
      |
      | picker.tags = tags;
    h5#instance-property-tags-method-at
      a(aria-hidden='true' href='#instance-property-tags-method-at') #
      = ' '
      code picker.tags.at(key)
    p Returns the raw tag data from its key.
    pre: code
      | console.log(picker.tags.at('tag-1'));
    h5#instance-property-tags-method-count
      a(aria-hidden='true' href='#instance-property-tags-method-count') #
      = ' '
      code picker.tags.count()
    p Returns the total number of tags.
    pre: code
      | console.log(picker.tags.count());
    h5#instance-property-tags-method-get
      a(aria-hidden='true' href='#instance-property-tags-method-get') #
      = ' '
      code picker.tags.get(key)
    p Returns the tag position in the list, starting from #[code 0].
    pre: code
      | if (-1 !== picker.tags.get('tag-1')) { … }
    h5#instance-property-tags-method-has
      a(aria-hidden='true' href='#instance-property-tags-method-has') #
      = ' '
      code picker.tags.has(key)
    p Returns #[code true] if the tag is present.
    pre: code
      | if (picker.tags.has('tag-1')) { … }
    h5#instance-property-tags-method-let
      a(aria-hidden='true' href='#instance-property-tags-method-let') #
      = ' '
      code picker.tags.let(key)
    p Removes a tag by its key.
    pre: code
      | picker.tags.let('tag-1'); // Remove “tag-1” tag
      | picker.tags.let(); // Remove all tags
    h5#instance-property-tags-method-set
      a(aria-hidden='true' href='#instance-property-tags-method-set') #
      = ' '
      code picker.tags.set(key, value)
    p Adds a new tag with the given value or key and value.
    pre: code
      | picker.tags.set('tag-1');
      | picker.tags.set('tag-2', 'Tag 2');
      | picker.tags.set('tag-3', ['Tag 3', {
      |     title: 'This is a tag description.'
      | }]);
    h4#instance-property-text
      a(aria-hidden='true' href='#instance-property-text') #
      = ' '
      code picker.text
    p Gets or sets the current text in the tag picker’s input.
    pre: code
      | console.log(picker.text);
    pre: code
      | picker.text = 'tag-1, tag-2, tag-3';
    h4#instance-property-value
      a(aria-hidden='true' href='#instance-property-value') #
      = ' '
      code picker.value
    p Proxy that passes to the #[a(href='#instance-property-self') #[code picker.self.value]] property, with additional actions that are executed while the value is being set.
    pre: code
      | console.log(picker.value);
    pre: code
      | picker.on('change', function () {
      |     console.log(this.value);
      | });
      |
      | picker.value = 'tag-1, tag-2, tag-3';
    h4#instance-property-vital
      a(aria-hidden='true' href='#instance-property-vital') #
      = ' '
      code picker.vital
    p Gets or sets the required state of the tag picker. By setting the value to #[code false] or #[code true], the required state of the source element will also be set automatically. If the value is set to #[code true] and the current #[a(href='#instance-property-min') #[code picker.min]] value is #[code 0], then it will change the current #[a(href='#instance-property-min') #[code picker.min]] value to #[code 1].
    pre: code
      | picker.vital = true; // Make the tag picker “required”
    h3#static-properties
      a(aria-hidden='true' href='#static-properties') #
      = ' Static Properties'
    p Static properties are properties available directly on the #[a(href='#constructor-tag-picker') #[code TagPicker]] object.
    h4#static-property-prototype
      a(aria-hidden='true' href='#static-property-prototype') #
      = ' '
      code TagPicker._
    p Alias for #[code TagPicker.prototype].
    pre: code
      | TagPicker._.clear = function () {
      |     return (this.text = this.value = ""), this;
      | };
      |
      | const picker = new TagPicker(document.querySelector('input'));
      |
      | picker.clear(); // Clear value
    h4#static-property-state
      a(aria-hidden='true' href='#static-property-prototype') #
      = ' '
      code TagPicker.state
    p Returns the default values of #[a(href='#instance-property-state') #[code picker.state]].
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     test: [1, 2, true]
      | });
      |
      | console.log([TagPicker.state, picker.state]);
    h4#static-property-version
      a(aria-hidden='true' href='#static-property-version') #
      = ' '
      code TagPicker.version
    p Returns the application version.
    h2#extensions
      a(aria-hidden='true' href='#extensions') #
      = ' Extensions'
    h3#anatomy-of-an-extension
      a(aria-hidden='true' href='#anatomy-of-an-extension') #
      = ' Anatomy of an Extension'
    p Extension as a function:
    pre: code
      | function Extension(self, state = {}) {
      |     this.test = 1;
      |     return this;
      | }
      |
      | Object.defineProperty(Extension, 'name', {
      |     value: 'Extension'
      | });
    p Extension as an object:
    pre: code
      | const Extension = {
      |     attach: function (self, state = {}) {
      |         this.test = 1;
      |         return this;
      |     },
      |     detach: function (self, state = {}) {
      |         delete this.test;
      |         return this;
      |     },
      |     name: 'Extension'
      | };
    h3#usage-of-an-extension
      a(aria-hidden='true' href='#usage-of-an-extension') #
      = ' Usage of an Extension'
    p As a core extension:
    pre: code
      | TagPicker.state.with.push(Extension);
    p As an optional extension:
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     with: [Extension]
      | });
    h3#list-of-extensions
      a(aria-hidden='true' href='#list-of-extensions') #
      = ' List of Extensions'
    ul
      li: a(aria-disabled='true') Clear Feature
      li: a(aria-disabled='true') History Feature
      li: a(aria-disabled='true') Options Feature
      li: a(href='../tag-picker.sort/index.html') Sortable Feature
    h2#license
      a(aria-hidden='true' href='#license') #
      = ' License'
    p If this project has saved you time, please #[a(href='https://paypal.me/tatautaufik' target='_blank') donate]. Thank you! ❤️
  footer
    hr
    p
      != '© ' + year + ' '
      a(href='/') Taufik Nurrohman